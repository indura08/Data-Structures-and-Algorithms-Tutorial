What is Recursion?

Recursion is a programming technique where a function calls itself to solve a problem in a smaller, more manageable way. It keeps breaking down the problem into smaller subproblems until it reaches a base case (a condition where it stops calling itself).


How Recursion Works (Step-by-Step)

1️⃣ Base Case → The condition that stops the recursion. Without this, the function would call itself infinitely.
2️⃣ Recursive Case → The part where the function calls itself with a smaller input.
3️⃣ Stack Memory → Each function call is stored in a call stack until the base case is reached, then the calls start resolving backwards.


Example 1: A Simple Recursive Function (Factorial)

Factorial of n (n!) is defined as:

using System;

class Program
{
    static int Factorial(int n)
    {
        if (n == 1)  // Base case
            return 1;
        
        return n * Factorial(n - 1);  // Recursive case
    }

    static void Main()
    {
        Console.WriteLine(Factorial(5)); // Output: 120
    }
}


✅ How it works?

Factorial(5) → 5 * Factorial(4)
Factorial(4) → 4 * Factorial(3)
Factorial(3) → 3 * Factorial(2)
Factorial(2) → 2 * Factorial(1)
Factorial(1) → 1 (Base case stops recursion)

The results start multiplying back up.

Why Use Recursion?

✅ When a problem can be broken into smaller subproblems of the same type.
✅ To simplify complex problems like tree traversals, sorting algorithms, and backtracking.
✅ To reduce repetitive code that would be complicated with loops.


When Should You NOT Use Recursion?

🚫 When performance is a concern → Recursion uses more memory (call stack).
🚫 When the problem can be solved easily using loops → Iteration is often faster.
🚫 When recursion depth is too large → Risk of stack overflow error.


Recursion vs Iteration

Feature			Recursion			Iteration (Loops)
===========================================================================

Memory Usage		High (stack calls)		Low
Speed			Slower (due to stack calls)	Faster
Code Simplicity		Often simpler			More complex for some problems
Best Use Cases		Tree/graph problems, sorting	Large repetitive tasks

Common Use Cases of Recursion

📌 Sorting Algorithms → Merge Sort, Quick Sort
📌 Tree Traversals → Preorder, Inorder, Postorder
📌 Graph Traversals → Depth-First Search (DFS)
📌 Backtracking → Sudoku solver, N-Queens problem
📌 Divide and Conquer Problems → Binary search, Matrix multiplication




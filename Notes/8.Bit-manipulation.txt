ðŸ§  What Is Bit Manipulation?
-------------------------------

Bit manipulation means directly working with binary digits (0s and 1s) of numbers using bitwise operators like:

	& (AND)

	| (OR)

	^ (XOR)

	~ (NOT)

	<< (left shift)

	>> (right shift)

Why use it?

	Itâ€™s fast (low-level operations).

	It can help you solve certain types of problems very elegantly.

	Often used in optimization problems, flags, combinatorics, and memory-efficient tasks.

ðŸŽ¯ Classic Bit Manipulation Problem (NOT Single Number)
--------------------------------------------------------

ðŸ”’ Problem: Subset Generation using Bit Manipulation

"Given an array of distinct integers, return all possible subsets (the power set)."

ðŸ§¾ Example:

Input: nums = [1, 2, 3]

Output:

[
  [],        // no elements
  [1],       // only 1
  [2],       // only 2
  [3],       // only 3
  [1,2],
  [1,3],
  [2,3],
  [1,2,3]
]


ðŸ’¡ Idea:

Treat numbers from 0 to 2^n - 1 as bit masks.

Each bit in that number says whether to include the corresponding element in the subset.

ðŸ§ª Dry Run (nums = [1, 2, 3]):

n = 3 â†’ we loop from 0 to 7 (2Â³ - 1)

Example with number 5 (binary 101):

1st bit (rightmost) â†’ include nums[0] (1)

2nd bit â†’ skip nums[1] (2)

3rd bit â†’ include nums[2] (3)
â†’ Subset: [1, 3]


âœ… What You Learn from This:

How bits represent choices (include/exclude).

That loop + bitmask = powerful subset generator.

Bitwise AND (&) helps you check if a bit is set.

Bit shifts (<<) help you move bits left/right.


ðŸ§© Where Youâ€™ll See Bit Manipulation in Problems:

Subset / power set generation

Finding a unique number

Checking if a number is a power of 2

Counting set bits

Optimization problems where space/time matters

Graph problems using bitmasks to track visited nodes

Dynamic Programming with bitmasking (like the Traveling Salesman Problem)


âœ… Summary
-----------
Bit manipulation is great when the problem involves on/off decisions, flags, states, or sets of limited size.

It's like turning switches on/off in a clever way.


Q1: what is Collection.sort() and Array.sort() what is the difference and please explain what is arrays and collections? are they classes?

A1:

You're asking a great beginner question that clears up a lot of confusion! Let‚Äôs break it down simply so you can really understand what Arrays.sort() and Collections.sort() are ‚Äî and what Arrays and Collections actually mean in Java.

üî∂ Are Arrays and Collections classes?

Yes! Both are utility classes in Java that provide helpful methods for working with arrays and collections.

‚úÖ Arrays class
-----------------

Part of the java.util package.

Used to manipulate arrays ‚Äî like sorting, searching, comparing, filling, etc.

Works only with arrays (like int[], String[], etc).

Key Methods:
============

asList(T... a): Converts an array to a fixed-size list backed by the specified array.

binarySearch(): Performs binary search on sorted arrays to find the index of a specified element.

compare(): Compares two arrays lexicographically.

copyOf(): Copies the specified array, truncating or padding with default values if necessary.

copyOfRange(): Copies a specified range of the array into a new array.

deepEquals(): Checks if two arrays are deeply equal (useful for nested arrays).

deepHashCode(): Returns a hash code based on the "deep contents" of the specified array.

deepToString(): Returns a string representation of the "deep contents" of the specified array.

equals(): Checks if two arrays are equal.

fill(): Assigns the specified value to each element of the array.

hashCode(): Returns a hash code based on the contents of the array.

mismatch(): Finds and returns the index of the first mismatch between two arrays.

parallelPrefix(): Applies a binary operator to each element of the array in parallel.

parallelSetAll(): Sets all elements of the array in parallel using a generator function.

parallelSort(): Sorts the array in parallel using the Fork/Join framework.

setAll(): Sets all elements of the array using a generator function.

sort(): Sorts the array into ascending order.

spliterator(): Returns a Spliterator covering all elements of the array.

stream(): Returns a sequential Stream with the specified array as its source.

toString(): Returns a string representation of the array's contents.




‚úÖ Collections class
---------------------

Also part of the java.util package.

Used to manipulate collection types ‚Äî like ArrayList, LinkedList, HashSet, etc.

Works only with objects that implement the Collection interface.

List<Integer> list = new ArrayList<>();
list.add(3);
list.add(1);
list.add(2);
Collections.sort(list);  // Sorts the list ‚Üí [1, 2, 3]

Key Methods:
=============

addAll(): Adds all specified elements to the specified collection.

binarySearch(): Searches for a specified object in a sorted list using binary search.

copy(): Copies all elements from one list into another.

disjoint(): Returns true if two collections have no elements in common.

emptyList(), emptyMap(), emptySet(): Returns an empty, immutable collection of the specified type.

fill(): Replaces all elements in a list with the specified element.

frequency(): Returns the number of elements in the specified collection equal to the specified object.

indexOfSubList(), lastIndexOfSubList(): Returns the starting position of the first/last occurrence of the specified target list within the specified source list.

max(), min(): Returns the maximum/minimum element of the given collection, according to the natural ordering or a specified comparator.

nCopies(): Returns an immutable list consisting of n copies of the specified object.

replaceAll(): Replaces all occurrences of one specified value in a list with another.

reverse(): Reverses the order of elements in a list.

reverseOrder(): Returns a comparator that imposes the reverse of the natural ordering.

rotate(): Rotates the elements in the list by the specified distance.

shuffle(): Randomly permutes the specified list using a default source of randomness.

singleton(), singletonList(), singletonMap(): Returns an immutable set/list/map containing only the specified element/key-value pair.

sort(): Sorts the specified list into ascending order, according to the natural ordering or a specified comparator.

swap(): Swaps the elements at the specified positions in the specified list.

synchronizedCollection(), synchronizedList(), synchronizedMap(), synchronizedSet(): Returns a synchronized (thread-safe) collection backed by the specified collection.

unmodifiableCollection(), unmodifiableList(), unmodifiableMap(), unmodifiableSet(): Returns an unmodifiable view of the specified collection.

üîÑ So what's the difference?
------------------------------

| Feature            | `Arrays.sort()`                   | `Collections.sort()`               |
| ------------------ | --------------------------------- | ---------------------------------- |
| Works on           | Arrays (like `int[]`, `String[]`) | Collections (like `List<Integer>`) |
| Modifies in-place? | Yes                               | Yes                                |
| Type required      | Primitive or object arrays        | List of objects                    |
| Belongs to class   | `java.util.Arrays`                | `java.util.Collections`            |


____________________________________________________________________________________________________________________________________________________________________________________________


Q2: Why i couldn't use sum as integer value? and why some test cases failed by returning the same inptut array (nums)

A: 
‚úÖ Step 1: What's the maximum possible sum?
You're using four 1,000,000,000 values:

1000000000 + 1000000000 + 1000000000 + 1000000000 = 4,000,000,000
s
So your array only has big positive numbers, and you're asking for a big negative sum.

‚ùå Conclusion: It is impossible to get that target.

üß® So why are you getting output?
Let‚Äôs zoom in on this part of your code:

int sum = nums[i] + nums[j] + nums[left] + nums[right];

‚ö†Ô∏è Java Integer Overflow
Java's int type has a maximum value of 2,147,483,647.
When you do this:

int sum = 1000000000 + 1000000000 + 1000000000 + 1000000000;

It overflows!

Java doesn't throw an error ‚Äî instead, it wraps around to a negative value due to integer overflow.

üõ†Ô∏è How to fix it?
Use long instead of int when calculating sum:


____________________________________________________________________________________________________________________________________________________________________________________________

4Sum 2ms run time code:


 import java.util.*;
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        return new AbstractList<List<Integer>>(){
            private List<List<Integer>> result;
            int length=nums.length;
            public List<Integer> get(int i){
                init();
                return result.get(i);
            }

            public int size(){
                init();
                return result.size();
            }

            void init() {
                Arrays.sort(nums);
                result=new ArrayList<>();
                for(int i=0; i < length-3; i++) {
                    if(i > 0 && nums[i-1] == nums[i]) continue;
                    for(int j=i+1; j < length-2; j++) {
                        if(j > i+1 && nums[j] == nums[j-1]) continue;
                        int left = j+1, right = length-1;
                        while(left < right) {
                            long sum = 0L+nums[i]+nums[j]+nums[left]+nums[right];
                            if(sum == target) {
                                result.add(List.of(nums[i], nums[j], nums[left], nums[right]));
                                do left++; while(left < right && nums[left] == nums[left-1]);
                                do right--; while(left < right && nums[right] == nums[right+1]);
                            } else if(sum > target) {
                                right--;
                            } else {
                                left++;
                            }
                        }
                    }
                }
            }
        };
    }
}

1️⃣ Count the Number of Operations

Look at the number of times the main operations (loops, recursion, function calls) execute as n (input size) grows.


2️⃣ Identify Patterns in the Code

If an operation happens once, it’s O(1).
If a loop runs n times, it’s O(n).
If a nested loop runs n × n times, it’s O(n²).
If an algorithm divides the problem in half each step, it’s O(log n).
If an algorithm doubles work every step, it’s O(2ⁿ).

3️⃣ Ignore Constants and Lower-Order Terms

Big O focuses on the largest growing factor (dominant term).

If your algorithm has O(3n + 5), you drop constants and write it as O(n).
If it's O(n² + n), you ignore n and keep O(n²).

🔹 Example 2: Nested Loop → O(n²)

def print_pairs(n):
    for i in range(n):
        for j in range(n):
            print(i, j)  # Runs 'n * n' times

✅ The outer loop runs n times.
✅ The inner loop runs n times for each outer loop.
✅ Total operations = n × n = O(n²).


🔹 Example 3: Halving the Problem → O(log n)

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1


✅ The array shrinks by half each step → O(log n).


Q:how to say my algorithm is 3n + 5 if my algorithm has mathematical equation 3n+5 , im confused please explain it with an example?


🔹 What Does 3n + 5 Mean?

The expression 3n + 5 represents the number of operations an algorithm performs based on the input size n.

The 3n means there is some operation happening proportional to n, but multiplied by 3 (e.g., a loop running n times with 3 operations inside).
The +5 means there are 5 constant operations that happen no matter the size of n.

🔹 Example Code for 3n + 5 Complexity

def example_function(arr):
    print("Start")   # 1 operation
    
    for i in range(len(arr)):  # Runs 'n' times
        print(i)  # 1 operation per loop
        print(i * 2)  # 1 operation per loop
        print(i + 3)  # 1 operation per loop
    
    print("End")  # 1 operation



Example: problmes to practice

Example 1: Double Loop with Extra Operations

def example1(n):
    print("Start")  # 1 operation
    
    for i in range(n):  # Runs 'n' times
        print(i)  # 1 operation per loop
        for j in range(n):  # Runs 'n' times inside first loop
            print(j)  # 1 operation per loop
            
    print("End")  # 1 operation


👉 What's the mathematical expression?
👉 What's the Big O complexity?


Example 2: Half-Sized Loop with Extra Work

def example2(n):
    count = 0  # 1 operation
    
    while n > 1:
        n = n // 2  # Reducing n by half
        print(n)  # 1 operation per iteration
        count += 1  # 1 operation per iteration

    for i in range(count):  # Runs 'count' times
        print(i)  # 1 operation per loop




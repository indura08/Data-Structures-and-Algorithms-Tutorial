The ListIterator class in Java is a special type of iterator that allows bidirectional traversal of a list (both forward and backward). It’s specifically designed for use with list-based collections like ArrayList and LinkedList.

1. What is ListIterator?

It is an interface in Java (java.util.ListIterator) that extends the Iterator interface.
While Iterator only supports moving forward, ListIterator adds functionality to move backward through the list, modify the list, and check the position of the iterator.


2. Key Features of ListIterator:

Bidirectional traversal: You can move forward (next()) or backward (previous()).

Ability to modify the list:

Add an element while iterating (add()).
Remove the last returned element (remove()).
Update the value of the last returned element (set()).

Index tracking: You can check the index of the next or previous element (nextIndex() and previousIndex()).

3. Common Methods in ListIterator:

Method								Description

boolean hasNext()				Checks if there’s a next element.

E next()					Returns the next element and moves the iterator forward.

boolean hasPrevious()				Checks if there’s a previous element.

E previous()					Returns the previous element and moves the iterator backward.

int nextIndex()					Returns the index of the next element.

int previousIndex()				Returns the index of the previous element.

void remove()					Removes the last element returned by next() or previous().

void add(E element)				Inserts the specified element immediately before the next element.

void set(E element)				Replaces the last element returned by next() or previous() with the specified element.

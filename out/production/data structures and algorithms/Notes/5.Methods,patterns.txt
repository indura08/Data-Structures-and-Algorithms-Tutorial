🔁 1. Two Pointer Method
------------------------

📘 What is it?
You use two indexes (pointers) to scan the array from different directions — usually from start and end or both from start — depending on the problem.

✅ When to use:
When dealing with sorted arrays

Problems involving pairs (e.g., "Find two numbers that sum to a target")

Reverse operations or moving inwards/outwards.

👇 Example Problem:
Given a sorted array, find if there exists two numbers that sum to target.


public boolean hasPairWithSum(int[] nums, int target) {
    int left = 0;
    int right = nums.length - 1;
    
    while (left < right) {
        int sum = nums[left] + nums[right];
        
        if (sum == target) return true;
        else if (sum < target) left++;
        else right--;
    }
    
    return false;
}


🔄 2. Sliding Window	
---------------------

📘 What is it?
You use a window of elements (like a subarray) and "slide" it across the array.

✅ When to use:
Problems asking for maximum/minimum/average of subarray

Finding patterns in a substring

When you need to consider a range of elements

👇 Example Problem:
Find maximum sum of any subarray of size k.

public int maxSum(int[] nums, int k) {
    int max = 0;
    int sum = 0;
    
    for (int i = 0; i < k; i++) {
        sum += nums[i];
    }
    
    max = sum;
    
    for (int i = k; i < nums.length; i++) {
        sum += nums[i] - nums[i - k];
        max = Math.max(max, sum);
    }
    
    return max;
}


🔁 3. Fast & Slow Pointer (a.k.a. Tortoise & Hare)
----------------------------------------------------

📘 What is it?
One pointer moves slowly, one moves faster. Useful for detecting cycles.

✅ When to use:
Detecting cycle in a linked list

Finding middle of linked list

👇 Example: Detect Cycle in Linked List


public boolean hasCycle(ListNode head) {
    ListNode slow = head;
    ListNode fast = head;

    while (fast != null && fast.next != null) {
        slow = slow.next;
        fast = fast.next.next;

        if (slow == fast) return true;
    }
    
    return false;
}


🎯 4. Binary Search
--------------------

📘 What is it?
Cut the search space in half every time.

✅ When to use:
When the array is sorted

When you want to find an element, or its position

Problems with search space (like finding min/max value)

👇 Example:

public int binarySearch(int[] nums, int target) {
    int left = 0, right = nums.length - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (nums[mid] == target) return mid;
        else if (nums[mid] < target) left = mid + 1;
        else right = mid - 1;
    }
    
    return -1;
}


🗂️ 5. Hashing (HashMap / HashSet) 
-----------------------------------

📘 What is it?
Use a HashMap or HashSet to store values for constant time lookups.

✅ When to use:
When checking for duplicates

When mapping values to keys

For counting frequencies

👇 Example: Find if any two numbers sum to target

public boolean hasPair(int[] nums, int target) {
    Set<Integer> set = new HashSet<>();
    
    for (int num : nums) {
        if (set.contains(target - num)) {
            return true;
        }
        set.add(num);
    }
    
    return false;
}


🧱 6. Prefix Sum
------------------

📘 What is it?
Pre-calculate sums so you can answer sum queries fast.

✅ When to use:
Repeated range sum queries

Checking subarray sums

👇 Example:

public int[] prefixSum(int[] nums) {
    int[] prefix = new int[nums.length];
    prefix[0] = nums[0];
    
    for (int i = 1; i < nums.length; i++) {
        prefix[i] = prefix[i - 1] + nums[i];
    }
    
    return prefix;
}

🔁 7. Backtracking
--------------------

📘 What is it?
Try all possibilities, but go back if you hit a dead end (like a smart brute force).

✅ When to use:
Permutations, combinations

Maze, Sudoku, puzzles

👇 Example: Generate all subsets

public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    backtrack(result, new ArrayList<>(), nums, 0);
    return result;
}

private void backtrack(List<List<Integer>> result, List<Integer> temp, int[] nums, int start) {
    result.add(new ArrayList<>(temp));
    
    for (int i = start; i < nums.length; i++) {
        temp.add(nums[i]);
        backtrack(result, temp, nums, i + 1);
        temp.remove(temp.size() - 1);
    }
}


🧠 8. Dynamic Programming (DP)
-------------------------------

📘 What is it?
Break problem into smaller overlapping subproblems and store the results to avoid recalculating.

✅ When to use:
When you can break down a problem into choices + subproblems

Problems involving counting, min/max, or optimal solutions

👇 Example: Fibonacci with DP


public int fib(int n) {
    if (n <= 1) return n;
    
    int[] dp = new int[n + 1];
    dp[0] = 0;
    dp[1] = 1;
    
    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    
    return dp[n];
}


🔀 9. Sorting
---------------

📘 What is it?
Sometimes sorting first simplifies the problem and makes it easier to apply other techniques.

✅ When to use:
Greedy problems

Two pointer or binary search solutions

Arrays.sort(arr); // Java built-in sort


🔧 Bonus: Greedy Method
-------------------------

📘 What is it?
Always take the best possible option at each step.

✅ When to use:
Problems with scheduling, intervals, or minimum/maximum selections

👇 Example: Minimum number of coins to make amount


public int minCoins(int[] coins, int amount) {
    Arrays.sort(coins);
    int count = 0;
    
    for (int i = coins.length - 1; i >= 0; i--) {
        while (amount >= coins[i]) {
            amount -= coins[i];
            count++;
        }
    }
    
    return amount == 0 ? count : -1;
}


